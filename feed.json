{"title":"Denny的博客","description":"前端菜鸟，但愿意学习，希望有大佬能带带我","language":null,"link":"http://yoursite.com","pubDate":"Thu, 14 Dec 2017 08:50:37 GMT","lastBuildDate":"Thu, 14 Dec 2017 08:53:42 GMT","generator":"hexo-generator-json-feed","webMaster":"Denny","items":[{"title":"Vue中的父子组件通信","link":"http://yoursite.com/2017/12/14/vue简易表格全选/","description":"最近以为公司业务需要不让用我最爱的elementUI了，刚开始感觉没啥，后来真到开始写了，真的就懵逼，组件不让用啥都得自己写了。。 最常用表格全选都都变成了一个坎。 对于表格全选，我们一定能想到就是判断表格的个数和表格选中的个数相比较，相等全选按钮就处于选中状态，不等就不选中，可是这又不是jQuery，选择器又不能用。对于刚接触vue半年而且大部分时间都在用饿了么组件的我真的是不知所措。 搜了很多资料，看到很多解决方案都是要在数据中加入checked状态，我是拒绝的，就算我愿意后台哥哥也不愿意啊，这不是脏数据嘛！ 而且还不是组件式的，谁想用都得copy一大坨代码，我相信我们组长是拒绝的。感觉好难哦。。。 但是问题还是要解决，饭还是要吃的。 回家的想了想，看了看vue的官网，灵感就来了，很快就把解决了。 你以为就这就完了？？全选反选只是checkbox选中，我们的选中是为了获取数据啊，不然选它干啥！ 刚开始想为每行的checkbox的click事件传值，后来具体操作发现这是有bug的。然后又各种尝试最后解决了问题。 下面上代码：12345678910111213141516171819202122232425262728293031323334Vue.component(&apos;check-all&apos;, &#123; template: &apos;&lt;input type=&quot;checkbox&quot; @click=&quot;checkall()&quot; /&gt;&apos;, props: &#123; // 必须为string类型 data: &#123; type: String, &#125;, &#125;, methods: &#123; checkall: function() &#123; var data = this.data?this.data:&quot;list&quot;; var row = this.$root.$refs[data].rows; var arr = []; var sels = []; for (var i = 1; i &lt; row.length; i++) &#123; if (row[i].children[0].children[0].checked) &#123; arr.push(row[i].children[0].children[0].checked); &#125;; &#125;; if (arr.length === row.length - 1) &#123; for (var i = 1; i &lt; row.length; i++) &#123; row[i].children[0].children[0].checked = false; &#125; &#125; else &#123; for (var i = 1; i &lt; row.length; i++) &#123; row[i].children[0].children[0].checked = true; sels.push(this.$root[data][row[i - 1].rowIndex]); &#125; &#125; this.$emit(&apos;ymhy-select-all&apos;, sels) &#125; &#125; &#125;) 1234567891011121314151617181920212223242526272829303132333435Vue.component(&apos;check-item&apos;, &#123; template: &apos;&lt;input type=&quot;checkbox&quot; @click=&quot;checkitem()&quot; /&gt;&apos;, // 技术上 data 的确是一个函数了，因此 Vue 不会警告， // 但是我们却给每个组件实例返回了同一个对象的引用 props: &#123; // 数组/对象的默认值应当由一个工厂函数返回 data: &#123; type: String, &#125;, &#125;, data: function() &#123; return &#123;&#125; &#125;, methods: &#123; checkitem: function() &#123; var data = this.data ? this.data : &quot;list&quot;; var row = this.$root.$refs[data].rows; var arr = []; var sels = []; for (var i = 1; i &lt; row.length; i++) &#123; if (row[i].children[0].children[0].checked) &#123; arr.push(row[i].children[0].children[0].checked); sels.push(this.$root[data][row[i - 1].rowIndex]); &#125;; &#125; if (arr.length === row.length - 1) &#123; row[0].children[0].children[0].checked = true; &#125; else &#123; row[0].children[0].children[0].checked = false; &#125; this.$emit(&apos;ymhy-select-item&apos;, sels) &#125;, &#125; &#125;) 想自己动手尝试的同学可以点击这里 这是的实现方法，如果大家还有更好的方式，还请赐教， 代码拙劣，如有错误，望指出。 本人原创 如需转载请注明出处","pubDate":"Thu, 14 Dec 2017 08:50:37 GMT","guid":"http://yoursite.com/2017/12/14/vue简易表格全选/","category":"Vue"},{"title":"Vue中的父子组件通信","link":"http://yoursite.com/2017/11/23/Vue中的父子组件通信/","description":"Vue中父组件向子组件传值，主要依靠组件中的props属性，下面是一个局部组件栗子","pubDate":"Thu, 23 Nov 2017 06:30:37 GMT","guid":"http://yoursite.com/2017/11/23/Vue中的父子组件通信/","category":"Vue"},{"title":"jQuery中的下载","link":"http://yoursite.com/2017/11/23/jQuery中的下载/","description":"在公司项目开发过程中遇到的小点，记录一下","pubDate":"Thu, 23 Nov 2017 06:30:37 GMT","guid":"http://yoursite.com/2017/11/23/jQuery中的下载/","category":"jQuery"},{"title":"get与post请求你知道多少？","link":"http://yoursite.com/2017/11/21/get与post请求你知道多少？/","description":"GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。 最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。 你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。 当你在面试中被问到这个问题，你的内心充满了自信和喜悦。","pubDate":"Tue, 21 Nov 2017 02:48:47 GMT","guid":"http://yoursite.com/2017/11/21/get与post请求你知道多少？/","category":"http"},{"title":"jsfiddle测试","link":"http://yoursite.com/2017/11/18/jsfiddle测试/","description":"","pubDate":"Sat, 18 Nov 2017 03:18:55 GMT","guid":"http://yoursite.com/2017/11/18/jsfiddle测试/","category":"hexo"},{"title":"博客初建成，谈一下感想吧！","link":"http://yoursite.com/2017/11/17/博客初建成，谈一下感想吧！/","description":"一，搭建个人博客这个想法从我刚刚开始接触前端就有了，感觉那是一件很cool的事，现在我就正在做这件很cool的事。 二，我是一名90后，我们这代人跟随着腾讯的小企鹅一起成长，从1999年的OICQ生到今天腾讯QQ，从飞车到英雄联盟（怪我生的晚之前的没玩过 罒ω罒），从天天酷跑到王者农药。当然腾讯对我们影响最大的还是社交，我们喜欢用QQ，也习惯了QQ，多少年不见得老友都能通过QQ找回来。还有QQ空间，这可能是那个时候我们唯一能够发泄心情的地方了，随时随地的发个说说，A（某位朋友的口中@）一下某人，分享一下自己的苦与乐。然而在不知不觉中","pubDate":"Fri, 17 Nov 2017 03:00:19 GMT","guid":"http://yoursite.com/2017/11/17/博客初建成，谈一下感想吧！/","category":"杂谈"},{"title":"first","link":"http://yoursite.com/2017/11/17/first/","description":"hello world!","pubDate":"Fri, 17 Nov 2017 02:55:38 GMT","guid":"http://yoursite.com/2017/11/17/first/","category":"杂谈"},{"title":"Hello World","link":"http://yoursite.com/2017/11/14/hello-world/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","pubDate":"Tue, 14 Nov 2017 05:23:45 GMT","guid":"http://yoursite.com/2017/11/14/hello-world/","category":"Hello World"}]}