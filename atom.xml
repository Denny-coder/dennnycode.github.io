<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Denny的博客</title>
  <icon>https://www.gravatar.com/avatar/0b538397a7c74171aa0d570be35003a0</icon>
  <subtitle>脾气古怪，请谅解</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-21T09:22:25.924Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Denny</name>
    <email>116345031@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类似表格的删除与添加</title>
    <link href="http://yoursite.com/2017/12/20/%E7%B1%BB%E4%BC%BC%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%B7%BB%E5%8A%A0/"/>
    <id>http://yoursite.com/2017/12/20/类似表格的删除与添加/</id>
    <published>2017-12-20T05:57:01.000Z</published>
    <updated>2017-12-21T09:22:25.924Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这是吐槽，可以跳过的</strong>，刚学习vue的时候用的第一个框架是elementUI，真的是爱不释手，公司的业务要求也没那么多，基本都能满足，现在不一样了，啥都得自己写了。怎么说呢，幸与不幸，幸运的是能够自己多动手动脑了，不幸的是貌似脑子不够用的。。。。<br>这个类表格，为什么要类表格呢？他虽然可以做成<strong>table</strong>,但因为很多人感觉<strong>table</strong>太low，所以大家都不怎么用，领导也不让用，于是我就用了这个类表格的称呼。<br>在一些业务场景中我们得让用户能对类表格能增加删除，假如我们用的是jQuery，这就是简单的字符串拼接和事件绑定，中间会有点小波折，比如<strong>事件委托</strong>（刚开始是真的头疼）。但是我们现在用的vue，我们不应该再去拼接一坨字符串，我们只要操作数据就行了，我的思路如下：<br><a id="more"></a></p><ol><li><p>创建一个数组对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">items: [&#123;</span><br><span class="line">       name: &apos;&apos;,   我</span><br><span class="line">       adds: &apos;&apos;,   在</span><br><span class="line">       tel: &apos;&apos;,    这</span><br><span class="line">     &#125;],           里</span><br></pre></td></tr></table></figure></li><li><p>v-for进行循环，这一步对我来说比较难得就是v-model了，但现在看来就是一种顺其自然的舒心。(希望你也能体会到这种感觉)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;main&quot; v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main-name&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;item.name&quot; :value=&quot;item.name&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-adds&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;item.adds&quot; :value=&quot;item.adds&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-tel&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;item.tel&quot; :value=&quot;item.tel&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-btn&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;add(index)&quot; v-if=&quot;index===len&quot;&gt;O&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;del(index)&quot; v-else&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li><li><p>把增加删除方法写上。在这里我们还需要写上获取数组长度的方法以便调用，因为我们要判断在最后一个的时候显示添加按钮，另一个原因是v-for时<strong>貌似</strong>获取不了这个长度。  </p></li></ol><pre><code>methods: {  del: function(index) {    this.items.splice(index, 1);    this.geLength();  },  add: function(index) {    this.items.splice(index, 0, {      name: &apos;&apos;,      adds: &apos;&apos;,      tel: &apos;&apos;,    });    this.geLength();  },  geLength: function() {    this.len = this.items.length - 1;  }},created: function() {  this.geLength();}</code></pre><p>大概就是这些了，想自己动手尝试的同学可以点击<a href="http://jsfiddle.net/Denny_code/1hejeh3w/4" target="_blank" rel="external">这里</a></p><p>如果大家还有更好的方式，还请赐教，</p><p>代码拙劣，如有错误，望指出。  </p><blockquote><p>本人原创 如需转载请注明出处 <a href="http://bestzhengke.com/2017/12/20/%E7%B1%BB%E4%BC%BC%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%B7%BB%E5%8A%A0/#more" target="_blank" rel="external">http://bestzhengke.com/2017/12/20/%E7%B1%BB%E4%BC%BC%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%B7%BB%E5%8A%A0/#more</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这是吐槽，可以跳过的&lt;/strong&gt;，刚学习vue的时候用的第一个框架是elementUI，真的是爱不释手，公司的业务要求也没那么多，基本都能满足，现在不一样了，啥都得自己写了。怎么说呢，幸与不幸，幸运的是能够自己多动手动脑了，不幸的是貌似脑子不够用的。。。。&lt;br&gt;这个类表格，为什么要类表格呢？他虽然可以做成&lt;strong&gt;table&lt;/strong&gt;,但因为很多人感觉&lt;strong&gt;table&lt;/strong&gt;太low，所以大家都不怎么用，领导也不让用，于是我就用了这个类表格的称呼。&lt;br&gt;在一些业务场景中我们得让用户能对类表格能增加删除，假如我们用的是jQuery，这就是简单的字符串拼接和事件绑定，中间会有点小波折，比如&lt;strong&gt;事件委托&lt;/strong&gt;（刚开始是真的头疼）。但是我们现在用的vue，我们不应该再去拼接一坨字符串，我们只要操作数据就行了，我的思路如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue简易表格全选</title>
    <link href="http://yoursite.com/2017/12/14/vue%E7%AE%80%E6%98%93%E8%A1%A8%E6%A0%BC%E5%85%A8%E9%80%89/"/>
    <id>http://yoursite.com/2017/12/14/vue简易表格全选/</id>
    <published>2017-12-14T08:50:37.000Z</published>
    <updated>2017-12-14T08:58:10.282Z</updated>
    
    <content type="html"><![CDATA[<p>最近以为公司业务需要不让用我最爱的<strong>elementUI</strong>了，刚开始感觉没啥，后来真到开始写了，真的就懵逼，组件不让用啥都得自己写了。。</p><p>最常用表格全选都都变成了一个坎。</p><p>对于表格全选，我们一定能想到就是判断表格的个数和表格选中的个数相比较，相等全选按钮就处于选中状态，不等就不选中，可是这又不是<strong>jQuery</strong>，选择器又不能用。对于刚接触vue半年而且大部分时间都在用饿了么组件的我真的是不知所措。</p><p>搜了很多资料，看到很多解决方案都是要在数据中加入<strong>checked</strong>状态，我是拒绝的，就算我愿意后台哥哥也不愿意啊，这不是脏数据嘛！</p><p>而且还不是组件式的，谁想用都得copy一大坨代码，我相信我们组长是拒绝的。感觉好难哦。。。</p><p>但是问题还是要解决，饭还是要吃的。</p><p>回家的想了想，看了看vue的官网，灵感就来了，很快就把解决了。</p><p>你以为就这就完了？？</p><p><img src="/assets/get-post/get-post-6" alt="image"><br><a id="more"></a></p><p>全选反选只是checkbox选中，我们的选中是为了获取数据啊，不然选它干啥！</p><p>刚开始想为每行的checkbox的click事件传值，后来具体操作发现这是有bug的。然后又各种尝试最后解决了问题。</p><p>下面上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;check-all&apos;, &#123;</span><br><span class="line">template: &apos;&lt;input type=&quot;checkbox&quot; @click=&quot;checkall()&quot; /&gt;&apos;,</span><br><span class="line">props: &#123;</span><br><span class="line">  // 必须为string类型</span><br><span class="line">  data: &#123;</span><br><span class="line">type: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  checkall: function() &#123;</span><br><span class="line">var data = this.data?this.data:&quot;list&quot;;</span><br><span class="line">var row = this.$root.$refs[data].rows;</span><br><span class="line">var arr = [];</span><br><span class="line">var sels = [];</span><br><span class="line">for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">  if (row[i].children[0].children[0].checked) &#123;</span><br><span class="line">arr.push(row[i].children[0].children[0].checked);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">if (arr.length === row.length - 1) &#123;</span><br><span class="line">  for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">  </span><br><span class="line">row[i].children[0].children[0].checked = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">row[i].children[0].children[0].checked = true;</span><br><span class="line">sels.push(this.$root[data][row[i - 1].rowIndex]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">this.$emit(&apos;ymhy-select-all&apos;, sels)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;check-item&apos;, &#123;</span><br><span class="line">template: &apos;&lt;input type=&quot;checkbox&quot; @click=&quot;checkitem()&quot; /&gt;&apos;,</span><br><span class="line">// 技术上 data 的确是一个函数了，因此 Vue 不会警告，</span><br><span class="line">// 但是我们却给每个组件实例返回了同一个对象的引用</span><br><span class="line">props: &#123;</span><br><span class="line">  // 数组/对象的默认值应当由一个工厂函数返回</span><br><span class="line">  data: &#123;</span><br><span class="line">type: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">data: function() &#123;</span><br><span class="line">  return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  checkitem: function() &#123;</span><br><span class="line">var data = this.data ? this.data : &quot;list&quot;;</span><br><span class="line">var row = this.$root.$refs[data].rows;</span><br><span class="line">var arr = [];</span><br><span class="line">var sels = [];</span><br><span class="line">for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">  if (row[i].children[0].children[0].checked) &#123;</span><br><span class="line">arr.push(row[i].children[0].children[0].checked);</span><br><span class="line">sels.push(this.$root[data][row[i - 1].rowIndex]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">if (arr.length === row.length - 1) &#123;</span><br><span class="line">  row[0].children[0].children[0].checked = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  row[0].children[0].children[0].checked = false;</span><br><span class="line">&#125;</span><br><span class="line">this.$emit(&apos;ymhy-select-item&apos;, sels)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>想自己动手尝试的同学可以点击<a href="https://jsfiddle.net/Denny_code/84d7224x/2/" target="_blank" rel="external">这里</a></p><p>这是的实现方法，如果大家还有更好的方式，还请赐教，</p><p>代码拙劣，如有错误，望指出。</p><blockquote><p>本人原创 如需转载请注明出处 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近以为公司业务需要不让用我最爱的&lt;strong&gt;elementUI&lt;/strong&gt;了，刚开始感觉没啥，后来真到开始写了，真的就懵逼，组件不让用啥都得自己写了。。&lt;/p&gt;
&lt;p&gt;最常用表格全选都都变成了一个坎。&lt;/p&gt;
&lt;p&gt;对于表格全选，我们一定能想到就是判断表格的个数和表格选中的个数相比较，相等全选按钮就处于选中状态，不等就不选中，可是这又不是&lt;strong&gt;jQuery&lt;/strong&gt;，选择器又不能用。对于刚接触vue半年而且大部分时间都在用饿了么组件的我真的是不知所措。&lt;/p&gt;
&lt;p&gt;搜了很多资料，看到很多解决方案都是要在数据中加入&lt;strong&gt;checked&lt;/strong&gt;状态，我是拒绝的，就算我愿意后台哥哥也不愿意啊，这不是脏数据嘛！&lt;/p&gt;
&lt;p&gt;而且还不是组件式的，谁想用都得copy一大坨代码，我相信我们组长是拒绝的。感觉好难哦。。。&lt;/p&gt;
&lt;p&gt;但是问题还是要解决，饭还是要吃的。&lt;/p&gt;
&lt;p&gt;回家的想了想，看了看vue的官网，灵感就来了，很快就把解决了。&lt;/p&gt;
&lt;p&gt;你以为就这就完了？？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/get-post/get-post-6&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的父子组件通信</title>
    <link href="http://yoursite.com/2017/11/23/Vue%E4%B8%AD%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/11/23/Vue中的父子组件通信/</id>
    <published>2017-11-23T06:30:37.000Z</published>
    <updated>2018-06-05T14:10:44.375Z</updated>
    
    <content type="html"><![CDATA[<p>Vue中父组件向子组件传值，主要依靠组件中的<strong><em>props</em></strong>属性，下面是一个局部组件栗子<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/tuqv8bko/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe><br><a id="more"></a><br>这里是一个全局组件的栗子<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/4zaapsda/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><p>那么子组件又如何向父组件传值呢？类比官网我们来看看下面的栗子：<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/bh33rkc4/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><ul><li>使用 <strong><em>$on(eventName)</em></strong> 监听事件</li><li>使用 <strong><em>$emit(eventName)</em></strong> 触发事件性  </li></ul><p>切记<strong>==不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子==。</strong><br>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，因为父组件可能会关心这些事件。请注意这一点很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue中父组件向子组件传值，主要依靠组件中的&lt;strong&gt;&lt;em&gt;props&lt;/em&gt;&lt;/strong&gt;属性，下面是一个局部组件栗子&lt;br&gt;&lt;iframe scrolling=&quot;no&quot; width=&quot;600&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net///Denny_code/tuqv8bko/embedded/js,resources,css,html,result/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中的下载</title>
    <link href="http://yoursite.com/2017/11/23/jQuery%E4%B8%AD%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/11/23/jQuery中的下载/</id>
    <published>2017-11-23T06:30:37.000Z</published>
    <updated>2018-06-05T14:10:02.402Z</updated>
    
    <content type="html"><![CDATA[<p>在公司项目开发过程中遇到的小点，记录一下<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/ybd7mcke//embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在公司项目开发过程中遇到的小点，记录一下&lt;br&gt;&lt;iframe scrolling=&quot;no&quot; width=&quot;600&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net///Denny_code/ybd7mcke//embedded/js,resources,
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>get与post请求你知道多少？</title>
    <link href="http://yoursite.com/2017/11/21/get%E4%B8%8Epost%E8%AF%B7%E6%B1%82%E4%BD%A0%E7%9F%A5%E9%81%93%E5%A4%9A%E5%B0%91%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/11/21/get与post请求你知道多少？/</id>
    <published>2017-11-21T02:48:47.000Z</published>
    <updated>2017-11-21T03:31:56.423Z</updated>
    
    <content type="html"><![CDATA[<hr><p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。</p><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</p><p>你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。</p><p>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p><p><img src="/assets/get-post/get-post-1" alt="image"></p><a id="more"></a><p>你轻轻松松的给出了一个“标准答案”：</p><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>GET请求只能进行url编码，而POST支持多种编码方式。</p><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p><p>GET参数通过URL传递，POST放在Request body中。<br>（本标准答案参考自w3schools）</p><p>“很遗憾，这不是我们要的回答！”</p><p><img src="/assets/get-post/get-post-2" alt="image"></p><p>请告诉我真相。。。</p><p>如果我告诉你GET和POST本质上没有区别你信吗？ </p><p>让我们扒下GET和POST的外衣，坦诚相见吧！</p><p><img src="/assets/get-post/get-post-3" alt="image"></p><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>那么，“标准答案”里的那些区别是怎么回事？</p><p><img src="/assets/get-post/get-post-4" alt="image"></p><p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？</p><p><img src="/assets/get-post/get-post-5" alt="image"></p><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 </p><p>你以为本文就这么结束了？</p><p><img src="/assets/get-post/get-post-6" alt="image"></p><p>我们的大BOSS还等着出场呢。。。</p><p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET和POST还有一个重大区别，简单的说：<br>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：<br>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li>GET与POST都有自己的语义，不能随便混用。</li><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li></ol><p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p><p><img src="/assets/get-post/get-post-7" alt="image"></p><blockquote><p>转自微信公众号WebTechGarden</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。&lt;/p&gt;
&lt;p&gt;最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。&lt;/p&gt;
&lt;p&gt;你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。&lt;/p&gt;
&lt;p&gt;当你在面试中被问到这个问题，你的内心充满了自信和喜悦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/get-post/get-post-1&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>jsfiddle测试</title>
    <link href="http://yoursite.com/2017/11/18/jsfiddle%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/11/18/jsfiddle测试/</id>
    <published>2017-11-18T03:18:55.000Z</published>
    <updated>2018-06-05T14:10:08.963Z</updated>
    
    <content type="html"><![CDATA[<iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/rrkg0k8h/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe><!-- <iframe scrolling="no" width="[width]" height="[height]" src="//jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" allowfullscreen></iframe> –&gt;-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe scrolling=&quot;no&quot; width=&quot;600&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net///Denny_code/rrkg0k8h/embedded/js,resources,css,html,result/light&quot; frame
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客初建成，谈一下感想吧！</title>
    <link href="http://yoursite.com/2017/11/17/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%BB%BA%E6%88%90%EF%BC%8C%E8%B0%88%E4%B8%80%E4%B8%8B%E6%84%9F%E6%83%B3%E5%90%A7%EF%BC%81/"/>
    <id>http://yoursite.com/2017/11/17/博客初建成，谈一下感想吧！/</id>
    <published>2017-11-17T03:00:19.000Z</published>
    <updated>2017-11-18T02:25:26.976Z</updated>
    
    <content type="html"><![CDATA[<img src="/assets/2017-11-17/me.jpg" class="itsme" width="170" title="这只就是我本人啦！！！"><h2 id="一，"><a href="#一，" class="headerlink" title="一，"></a>一，</h2><p>搭建个人博客这个想法从我刚刚开始接触前端就有了，感觉那是一件很cool的事，现在我就正在做这件很cool的事。  </p><h2 id="二，"><a href="#二，" class="headerlink" title="二，"></a>二，</h2><p>我是一名90后，我们这代人跟随着腾讯的小企鹅一起成长，从1999年的OICQ生到今天腾讯QQ，从飞车到英雄联盟（怪我生的晚之前的没玩过 罒ω罒），从天天酷跑到王者农药。<br>当然腾讯对我们影响最大的还是社交，我们喜欢用QQ，也习惯了QQ，多少年不见得老友都能通过QQ找回来。还有QQ空间，这可能是那个时候我们唯一能够发泄心情的地方了，随时随地的发个说说，A（某位朋友的口中@）一下某人，分享一下自己的苦与乐。然而在不知不觉中<a id="more"></a> 我们都更多的去使用<strong>微信</strong>，甚至认为用QQ是一件很low的事，添加朋友我们的首选变成了微信，求职发邮件也不敢再用QQ邮箱，一切都变了，变的那么快。<br>QQ变成了90后的情怀，QQ空间也是，微信变成了主流。<br>慢慢的我来到了大学，大家都一样，但我想不一样，我想有个自己的空间，安逸。<br>建立博客的想法逐渐产生。</p><h2 id="三，"><a href="#三，" class="headerlink" title="三，  "></a>三，  </h2><p>在我接触前端之前，建立个人博客只是一个想法，接触前端之后编程的实际行动。动手建站是在我第一份工作的时候，找到工作后就不需要话大量的时间去应对面试，工作之余也有了空闲，并且恰逢国庆，我可以安心的去做它。<br>原本以为这会花费好久的时间，没想到一天的功夫就搭起来了，这里要感谢<a href="http://www.cnfeat.com" target="_blank" rel="external">陈素封</a>的教程，从node到git,从申请域名到域名解析，基本都有详细的教程，推荐有建站想法的同学看看，迅速建立自己博客。  </p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>第一次用<strong>markdown</strong>语法，页面排版慢慢来，各位见谅，最后推荐一下有道云笔记的<strong>markdown</strong>编辑器，实时同步预览真心不错，还内置了各种语法，省时省力，懒人的福音！</p><iframe src="//music.163.com/outchain/player?type=2&id=167882&auto=0&height=66" width="330" height="86" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/assets/2017-11-17/me.jpg&quot; class=&quot;itsme&quot; width=&quot;170&quot; title=&quot;这只就是我本人啦！！！&quot;&gt;
&lt;h2 id=&quot;一，&quot;&gt;&lt;a href=&quot;#一，&quot; class=&quot;headerlink&quot; title=&quot;一，&quot;&gt;&lt;/a&gt;一，&lt;/h2&gt;&lt;p&gt;搭建个人博客这个想法从我刚刚开始接触前端就有了，感觉那是一件很cool的事，现在我就正在做这件很cool的事。  &lt;/p&gt;
&lt;h2 id=&quot;二，&quot;&gt;&lt;a href=&quot;#二，&quot; class=&quot;headerlink&quot; title=&quot;二，&quot;&gt;&lt;/a&gt;二，&lt;/h2&gt;&lt;p&gt;我是一名90后，我们这代人跟随着腾讯的小企鹅一起成长，从1999年的OICQ生到今天腾讯QQ，从飞车到英雄联盟（怪我生的晚之前的没玩过 罒ω罒），从天天酷跑到王者农药。&lt;br&gt;当然腾讯对我们影响最大的还是社交，我们喜欢用QQ，也习惯了QQ，多少年不见得老友都能通过QQ找回来。还有QQ空间，这可能是那个时候我们唯一能够发泄心情的地方了，随时随地的发个说说，A（某位朋友的口中@）一下某人，分享一下自己的苦与乐。然而在不知不觉中
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>first</title>
    <link href="http://yoursite.com/2017/11/17/first/"/>
    <id>http://yoursite.com/2017/11/17/first/</id>
    <published>2017-11-17T02:55:38.000Z</published>
    <updated>2017-11-18T02:27:04.376Z</updated>
    
    <content type="html"><![CDATA[<p>hello world!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello world!&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/14/hello-world/"/>
    <id>http://yoursite.com/2017/11/14/hello-world/</id>
    <published>2017-11-14T05:23:45.083Z</published>
    <updated>2017-11-18T02:27:17.754Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Hello World" scheme="http://yoursite.com/tags/Hello-World/"/>
    
  </entry>
  
</feed>
