<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Denny的博客</title>
  <icon>https://www.gravatar.com/avatar/0b538397a7c74171aa0d570be35003a0</icon>
  <subtitle>脾气古怪，请谅解</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-29T08:02:54.503Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Denny</name>
    <email>116345031@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则学习笔记</title>
    <link href="http://yoursite.com/2019/08/29/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/29/正则学习笔记/</id>
    <published>2019-08-29T07:49:33.000Z</published>
    <updated>2019-08-29T08:02:54.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。 请记住这句话。</p></blockquote><a id="more"></a><h2 id="1-正则表达式字符匹配攻略"><a href="#1-正则表达式字符匹配攻略" class="headerlink" title="1.正则表达式字符匹配攻略"></a>1.正则表达式字符匹配攻略</h2><table><thead><tr><th>字符组</th><th>具体含义</th></tr></thead><tbody><tr><td>\d</td><td>表示 [0-9]。表示是一位数字。记忆方式：其英文是 digit（数字）。</td></tr><tr><td>\D</td><td>表示 [^0-9]。表示除数字外的任意字符。</td></tr><tr><td>\w</td><td>表示 [0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w 是 word 的简写，也称单词字符。</td></tr><tr><td>\W</td><td>表示 [^0-9a-zA-Z_]。非单词字符。</td></tr><tr><td>\s</td><td>表示 [ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s 是 space 的首字母，空白符的单词是 white space。</td></tr><tr><td>\S</td><td>表示 [^ \t\v\n\r\f]。 非空白符。</td></tr><tr><td>.</td><td>表示 [^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号 … 中的每个点，都可以理解成占位符，表示任何类似的东西。</td></tr></tbody></table><table><thead><tr><th>量词</th><th>具体含义</th></tr></thead><tbody><tr><td> {m,}</td><td>表示至少出现 m 次。</td></tr><tr><td>{m}</td><td>等价于 {m,m}，表示出现 m 次。</td></tr><tr><td>?</td><td>等价于 {0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</td></tr><tr><td>+</td><td>等价于 {1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</td></tr><tr><td>*</td><td>等价于 {0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</td></tr></tbody></table><table><thead><tr><th>惰性量词</th><th>贪婪量词</th></tr></thead><tbody><tr><td>{m,n}?</td><td>{m,n}</td></tr><tr><td>{m,}?</td><td>{m,}</td></tr><tr><td>??</td><td>?</td></tr><tr><td>+?</td><td>+</td></tr><tr><td>*?</td><td>*</td></tr></tbody></table><h5 id="匹配颜色"><a href="#匹配颜色" class="headerlink" title="匹配颜色"></a>匹配颜色</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"#ffbbad #Fc01DF #FFF #ffE"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt; ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span></span><br></pre></td></tr></table></figure><h5 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a>匹配时间</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"23:59"</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"02:07"</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"7:9"</span>) );</span><br></pre></td></tr></table></figure><h5 id="匹配日期"><a href="#匹配日期" class="headerlink" title="匹配日期"></a>匹配日期</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"2017-06-10"</span>) );</span><br></pre></td></tr></table></figure><h5 id="window-操作系统文件路径"><a href="#window-操作系统文件路径" class="headerlink" title="window 操作系统文件路径"></a>window 操作系统文件路径</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[a-zA-Z]:\\([^\\:*&lt;&gt;|"?\r\n/]+\\)*([^\\:*&lt;&gt;|"?\r\n/]+)?$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"F:\\study\\javascript\\regex\\regular expression.pdf"</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"F:\\study\\javascript\\regex\\"</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"F:\\study\\javascript"</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"F:\\"</span>) );</span><br></pre></td></tr></table></figure><h5 id="匹配-id"><a href="#匹配-id" class="headerlink" title="匹配 id"></a>匹配 id</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/id=".*?"/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">'&lt;div id="container" class="main"&gt;&lt;/div&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/id="[^"]*"/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">'&lt;div id="container" class="main"&gt;&lt;/div&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h2 id="2-正则表达式位置匹配攻略"><a href="#2-正则表达式位置匹配攻略" class="headerlink" title="2.正则表达式位置匹配攻略"></a>2.正则表达式位置匹配攻略</h2><blockquote><p>位置（锚）是相邻字符之间的位置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ^（脱字符）匹配开头，在多行匹配中匹配行开头。</span></span><br><span class="line"><span class="comment">// $（美元符号）匹配结尾，在多行匹配中匹配行结尾。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \b 是单词边界，具体就是 \w 与 \W 之间的位置，也包括 \w 与 ^ 之间的位置，和 \w 与 $ 之间的位置。</span></span><br><span class="line"><span class="comment">// \B 就是 \b 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 \b，剩下的都是 \B 的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (?=p)，其中 p 是一个子模式，即 p前面的位置，或者说，该位置后面的字符要匹配 p。</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "he#l#lo"</span></span><br><span class="line"><span class="comment">// 而 (?!p) 就是 (?=p) 的反面意思，比如：</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?!l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "#h#ell#o#"</span></span><br><span class="line"><span class="comment">// 二者的学名分别是 positive lookahead 和 negative lookahead。</span></span><br><span class="line"><span class="comment">// 中文翻译分别是正向先行断言和负向先行断言。</span></span><br><span class="line"><span class="comment">// ES5 之后的版本，会支持 positive lookbehind 和 negative lookbehind。</span></span><br><span class="line"><span class="comment">// 具体是 (?&lt;=p) </span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?&lt;=l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "hel#l#o"</span></span><br><span class="line"><span class="comment">// 和 (?&lt;!p)。</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?&lt;!l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "#h#e#llo#"</span></span><br></pre></td></tr></table></figure><blockquote><p>把位置理解空字符，是对位置非常有效的理解方式。</p></blockquote><h5 id="不匹配任何东西的正则"><a href="#不匹配任何东西的正则" class="headerlink" title="不匹配任何东西的正则"></a>不匹配任何东西的正则</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">让你写个正则不匹配任何东西</span><br><span class="line">easy，/.^/。</span><br><span class="line">因为此正则要求只有一个字符，但该字符后面是开头，而这样的字符串是不存在的。</span><br></pre></td></tr></table></figure><h5 id="数字的千位分隔符表示法"><a href="#数字的千位分隔符表示法" class="headerlink" title="数字的千位分隔符表示法"></a>数字的千位分隔符表示法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"12345678"</span>.replace(regex, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "12,345,678"</span></span><br><span class="line">result = <span class="string">"123456789"</span>.replace(regex, <span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "123,456,789"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"12345678 123456789"</span>,</span><br><span class="line">regex = <span class="regexp">/(?!\b)(?=(\d&#123;3&#125;)+\b)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "12,345,678 123,456,789"</span></span><br><span class="line"><span class="comment">// 其中 (?!\b) 怎么理解呢？</span></span><br><span class="line"><span class="comment">// 要求当前是一个位置，但不是 \b 前面的位置，其实 (?!\b) 说的就是 \B。</span></span><br><span class="line"><span class="comment">// 因此最终正则变成了：/\B(?=(\d&#123;3&#125;)+\b)/g</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num.toFixed(<span class="number">2</span>).replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+\b)/g</span>, <span class="string">","</span>).replace(<span class="regexp">/^/</span>, <span class="string">"$$ "</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( format(<span class="number">1888</span>) );</span><br><span class="line"><span class="comment">// =&gt; "$ 1,888.00"</span></span><br></pre></td></tr></table></figure><h5 id="验证密码问题"><a href="#验证密码问题" class="headerlink" title="验证密码问题"></a>验证密码问题</h5><p> 1、 <strong>简化</strong><br>不考虑“但必须至少包括 2 种字符”这一条件。我们可以容易写出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure><p> 2、 <strong>判断是否包含有某一种字符</strong> 假设，要求的必须包含数字，怎么办？此时我们可以使用 (?=.*[0-9]) 来做。<br>因此正则变成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(?=.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure><p> 3、 <strong>同时包含具体两种字符</strong> 比如同时包含数字和小写字母，可以用 (?=.<em>[0-9])(?=.</em>[a-z]) 来做。<br>因此正则变成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure><p> 4、 <strong>解答</strong>我们可以把原题变成下列几种情况之一：<br>• 同时包含数字和小写字母<br>• 同时包含数字和大写字母<br>• 同时包含小写字母和大写字母<br>• 同时包含数字、小写字母和大写字母<br>• 以上的 4 种情况是或的关系（实际上，可以不用第 4 条）。<br>最终答案是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-</span></span><br><span class="line"><span class="regexp">Z]))^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"1234567"</span>) ); <span class="comment">// false 全是数字</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"abcdef"</span>) ); <span class="comment">// false 全是小写字母</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ABCDEFGH"</span>) ); <span class="comment">// false 全是大写字母</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ab23C"</span>) ); <span class="comment">// false 不足6位</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ABCDEF234"</span>) ); <span class="comment">// true 大写字母和数字</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"abcdEF234"</span>) ); <span class="comment">// true 三者都有</span></span><br></pre></td></tr></table></figure></p><p> 5、 <strong>解惑</strong>上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(?=.*[<span class="number">0</span><span class="number">-9</span>])^[<span class="number">0</span><span class="number">-9</span>A-Za-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$/</span><br></pre></td></tr></table></figure><p>对于这个正则，我们只需要弄明白 <code>(?=.*[0-9])^</code>即可。<br>分开来看就是 <code>(?=.*[0-9])</code>和 <code>^</code>。<br>表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。<br><code>(?=.*[0-9])</code>表示该位置后面的字符匹配<code>.*[0-9]</code>，即，有任何多个任意字符，后面再跟个数字。<br>翻译成大白话，就是接下来的字符，必须包含个数字。<br> 6、 <strong>另外一种解法</strong>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写<br>字母。<br>那么要求“不能全部都是数字”，怎么做呢？ <code>(?!p)</code> 出马！<br>对应的正则是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure></p><p><strong>最终答案是：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"1234567"</span>) ); <span class="comment">// false 全是数字</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"abcdef"</span>) ); <span class="comment">// false 全是小写字母</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ABCDEFGH"</span>) ); <span class="comment">// false 全是大写字母</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ab23C"</span>) ); <span class="comment">// false 不足6位</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ABCDEF234"</span>) ); <span class="comment">// true 大写字母和数字</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"abcdEF234"</span>) ); <span class="comment">// true 三者都有</span></span><br></pre></td></tr></table></figure></p><h2 id="3-正则表达式括号的作用"><a href="#3-正则表达式括号的作用" class="headerlink" title="3.正则表达式括号的作用"></a>3.正则表达式括号的作用</h2><h5 id="字符串-trim-方法模拟"><a href="#字符串-trim-方法模拟" class="headerlink" title="字符串 trim 方法模拟"></a>字符串 trim 方法模拟</h5><p>trim 方法是去掉字符串的开头和结尾的空白符。有两种思路去做。<br>第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( trim(<span class="string">" foobar "</span>) );</span><br><span class="line"><span class="comment">// =&gt; "foobar"</span></span><br></pre></td></tr></table></figure><p>第二种，匹配整个字符串，然后用引用来提取出相应的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/^\s*(.*?)\s*$/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( trim(<span class="string">" foobar "</span>) );</span><br><span class="line"><span class="comment">// =&gt; "foobar"</span></span><br></pre></td></tr></table></figure><p>这里使用了惰性匹配 *?，不然也会匹配最后一个空格之前的所有空格的。<br>当然，前者效率高。</p><h5 id="将每个单词的首字母转换为大写"><a href="#将每个单词的首字母转换为大写" class="headerlink" title="将每个单词的首字母转换为大写"></a>将每个单词的首字母转换为大写</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleize</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/(?:^|\s)\w/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.toUpperCase();</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( titleize(<span class="string">'my name is epeli'</span>) );</span><br><span class="line"><span class="comment">// =&gt; "My Name Is Epeli"</span></span><br></pre></td></tr></table></figure><h5 id="驼峰化"><a href="#驼峰化" class="headerlink" title="驼峰化"></a>驼峰化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/[-_\s]+(.)?/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">''</span>;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( camelize(<span class="string">'-moz-transform'</span>) );</span><br><span class="line"><span class="comment">// =&gt; "MozTransform"</span></span><br><span class="line"><span class="comment">// 其中分组 (.) 表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面</span></span><br><span class="line"><span class="comment">// 的 ? 的目的，是为了应对 str 尾部的字符可能不是单词字符，比如 str 是 '-moz-transform '。</span></span><br></pre></td></tr></table></figure><h5 id="中划线化"><a href="#中划线化" class="headerlink" title="中划线化"></a>中划线化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dasherize</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/([A-Z])/g</span>, <span class="string">'-$1'</span>).replace(<span class="regexp">/[-_\s]+/g</span>, <span class="string">'-'</span>).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( dasherize(<span class="string">'MozTransform'</span>) );</span><br><span class="line"><span class="comment">// =&gt; "-moz-transform"</span></span><br></pre></td></tr></table></figure><h5 id="HTML-转义和反转义"><a href="#HTML-转义和反转义" class="headerlink" title="HTML 转义和反转义"></a>HTML 转义和反转义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将HTML特殊字符转换成等值的实体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHTML</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> escapeChars = &#123;</span><br><span class="line">     <span class="string">'&lt;'</span> : <span class="string">'lt'</span>,</span><br><span class="line">     <span class="string">'&gt;'</span> : <span class="string">'gt'</span>,</span><br><span class="line">     <span class="string">'"'</span> : <span class="string">'quot'</span>,</span><br><span class="line">     <span class="string">'&amp;'</span> : <span class="string">'amp'</span>,</span><br><span class="line">     <span class="string">'\''</span> : <span class="string">'#39'</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">return</span> str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'['</span> + <span class="built_in">Object</span>.keys(escapeChars).join(<span class="string">''</span>) +<span class="string">']'</span>, <span class="string">'g'</span>),</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&amp;'</span> + escapeChars[match] + <span class="string">';'</span>;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( escapeHTML(<span class="string">'&lt;div&gt;Blah blah blah&lt;/div&gt;'</span>) );</span><br><span class="line"><span class="comment">// =&gt; "&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt";</span></span><br></pre></td></tr></table></figure><p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。<br>倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体字符转换为等值的HTML。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unescapeHTML</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> htmlEntities = &#123;</span><br><span class="line">     nbsp: <span class="string">' '</span>,</span><br><span class="line">     lt: <span class="string">'&lt;'</span>,</span><br><span class="line">     gt: <span class="string">'&gt;'</span>,</span><br><span class="line">     quot: <span class="string">'"'</span>,</span><br><span class="line">     amp: <span class="string">'&amp;'</span>,</span><br><span class="line">     apos: <span class="string">'\''</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/\&amp;([^;]+);/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, key</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (key <span class="keyword">in</span> htmlEntities) &#123;</span><br><span class="line">    <span class="keyword">return</span> htmlEntities[key];</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">return</span> match;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( unescapeHTML(<span class="string">'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span>) );</span><br><span class="line"><span class="comment">// =&gt; "&lt;div&gt;Blah blah blah&lt;/div&gt;"</span></span><br></pre></td></tr></table></figure><p>通过 key 获取相应的分组引用，然后作为对象的键。</p><h5 id="匹配成对标签"><a href="#匹配成对标签" class="headerlink" title="匹配成对标签"></a>匹配成对标签</h5><p>要求匹配：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;regular expression&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;laoyao bye bye&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure><p>不匹配：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;wrong!&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>匹配一个开标签，可以使用正则<code>&lt;[^&gt;]+&gt;</code>，<br>匹配一个闭标签，可以使用 <code>&lt;\/[^&gt;]+&gt;</code>，<br>但是要求匹配成对标签，那就需要使用反向引用，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/&lt;([^&gt;]+)&gt;[\d\D]*&lt;\/\1&gt;/</span>;</span><br><span class="line"><span class="keyword">var</span> string1 = <span class="string">"&lt;title&gt;regular expression&lt;/title&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> string2 = <span class="string">"&lt;p&gt;laoyao bye bye&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> string3 = <span class="string">"&lt;title&gt;wrong!&lt;/p&gt;"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string1) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string2) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string3) ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>其中开标签 <code>&lt;[\^&gt;]+&gt;</code> 改成 <code>&lt;([^&gt;]+)&gt;</code>，使用括号的目的是为了后面使用反向引用，<br>而提供分组。闭标签使用了反向引用，<code>&lt;\/\1&gt;</code>。<br>另外，<code>[\d\D]</code>的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正则表达式是匹配模式，要么匹配字符，要么匹配位置。 请记住这句话。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git常见命令</title>
    <link href="http://yoursite.com/2019/08/29/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/08/29/git常见命令/</id>
    <published>2019-08-29T06:24:05.000Z</published>
    <updated>2019-08-29T07:58:35.998Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir learngit // 创建文件</span><br><span class="line"><span class="built_in">cd</span> learngit // 进入文件</span><br><span class="line">git init //  初始化仓库</span><br><span class="line"></span><br><span class="line">git add readme.txt // 将readme.txt文件放入到暂存区</span><br><span class="line">git commit -m <span class="string">"wrote a readme file"</span> //提交暂存区的修改到仓库中</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h2><ol><li>版本回退</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git status // 检查本地文件的状态</span><br><span class="line">git diff readme.txt // 检测 readme.txt文件的修改内容</span><br><span class="line">git <span class="built_in">log</span> // 获取文件修改的日志</span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline // 使输出的日志更简洁</span><br><span class="line">git reset --hard HEAD^ // 使本地文件回退至上一个版本，上一个版本是指commit到仓库中的最近一个版本</span><br><span class="line">git reset --hard HEAD^^ // 回退至上上一个版本</span><br><span class="line">git reset --hard HEAD^100 // 回退至上100个版本</span><br><span class="line">git reset --hard 1094a // 回退至具体的某个版本</span><br><span class="line">git reflog // 查看每一次的命令，多用于查看版本<span class="built_in">hash</span></span><br></pre></td></tr></table></figure><ol><li>工作区和暂存区<br>简单的讲就是我们编码的文件夹就是工作区,<code>git add</code>的是暂存区,<br><code>git commit</code>的是仓库。</li><li>管理修改<br><code>git commit</code>只会提交暂存区中的修改。<br>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt;<code>git commit</code></li><li><p>撤销修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt // 丢弃工作区的修改。git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令</span><br><span class="line">git reset HEAD readme.txt // 撤销被交至暂存区的修改</span><br></pre></td></tr></table></figure></li><li><p>删除文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm test.txt // 删除文件</span><br></pre></td></tr></table></figure><p>一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">$ git commit -m <span class="string">"remove test.txt"</span></span><br><span class="line">// 小提示：先手动删除文件，然后使用git rm &lt;file&gt;和git add&lt;file&gt;效果是一样的。</span><br></pre></td></tr></table></figure></p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p>添加远程仓库<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>生成公钥和秘钥，将公钥添加至GitHub的SSH Keys。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:michaelliao/learngit.git // 将本地仓库与远程仓库关联起来</span><br><span class="line">git push -u origin master // 将本地仓库推送至远程仓库，由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span><br><span class="line">git push origin master //把本地master分支的最新修改推送至GitHub</span><br></pre></td></tr></table></figure></li><li><p>从远程仓库克隆</p></li></ol><p><code>git clone git@github.com:michaelliao/gitskills.git</code></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ol><li><p>创建和合并分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev // 创建并切换至dev分支</span><br><span class="line">等价于</span><br><span class="line">git branch dev // 创建分支</span><br><span class="line">git checkout dev // 切换分支</span><br><span class="line">git branch // 查看所有分支</span><br><span class="line"></span><br><span class="line">git add readme.txt // 修改Dev分支上的readme.txt</span><br><span class="line">git commit -m <span class="string">"branch test"</span> // 提交至Dev分支</span><br><span class="line">git checkout master // 切换至master分支</span><br><span class="line">git merge dev // 合并分支</span><br><span class="line">git branch -d dev // 删除Dev分支，因为此时Dev分支已经合并到master分支，Dev已经无用了</span><br></pre></td></tr></table></figure></li><li><p>解决冲突</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature1 // 创建并切换至feature1分支</span><br><span class="line">git add readme.txt // 修改并提交至版本库</span><br><span class="line">git commit -m <span class="string">"AND simple"</span></span><br><span class="line">git checkout master // 切换至master分支</span><br><span class="line">git add readme.txt // 修改并提交至版本库</span><br><span class="line">git commit -m <span class="string">"&amp; simple"</span></span><br><span class="line">git merge feature1 // 自动合并分支</span><br><span class="line">        Auto-merging readme.txt</span><br><span class="line">        CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txt</span><br><span class="line">        Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">// 解决以下冲突</span><br><span class="line">        Git tracks changes of files.</span><br><span class="line">        &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">        Creating a new branch is quick &amp; simple.</span><br><span class="line">        =======</span><br><span class="line">        Creating a new branch is quick AND simple.</span><br><span class="line">        &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br><span class="line">git add readme.txt // 在master分支解决冲突，之后提交至版本库</span><br><span class="line">git commit -m <span class="string">"conflict fixed"</span></span><br><span class="line">git branch -d feature1 // 删除feature1分支，如果继续在feature1分支编写代码，再次提交时依然会冲突</span><br></pre></td></tr></table></figure><ol><li><p>分支管理策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit,这样，从分支历史上就可以看出分支信息。</span><br><span class="line">git checkout -b dev  </span><br><span class="line">git add readme.txt </span><br><span class="line">git commit -m <span class="string">"add merge"</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure></li><li><p>bug分支</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git statu // 暂存目前的进度</span><br><span class="line"></span><br><span class="line">git checkout master //切换至主干</span><br><span class="line">git checkout -b issue-101 // 从主干创建分支</span><br><span class="line">git add readme.txt // 暂存修改</span><br><span class="line">git commit -m <span class="string">"fix bug 101"</span>  // 提交至仓库</span><br><span class="line">git checkout master // 切回主干</span><br><span class="line">git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101 // 合并issue-101</span><br><span class="line">git branch -d  issue-101 // 删除分支</span><br><span class="line"></span><br><span class="line">git checkout dev // 切回至工作分支</span><br><span class="line">git stash list // 查看贮存列表</span><br><span class="line">// 恢复工作分支 删除贮存</span><br><span class="line">git stash apply+git stash drop=git stash pop</span><br><span class="line">// 恢复指定的stash贮存</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Feature分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-vulcan</span><br><span class="line">git add vulcan.py</span><br><span class="line">git commit -m <span class="string">"add feature vulcan"</span></span><br><span class="line">git checkout dev // 切回开发分支，准备合并</span><br><span class="line">git branch -d feature-vulcan //</span><br></pre></td></tr></table></figure></li><li><p>多人协作</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git remote // 查看远程库信息</span><br><span class="line">git remote -v // 更为详细的远程库信息</span><br><span class="line">git push origin master // 将本地当前分支推送至master</span><br><span class="line">git push origin dev // 将本地当前分支推送至dev</span><br><span class="line">git checkout -b dev origin/dev // 创建的本地分支dev是从远程分支origin/dev得到的</span><br><span class="line">git add env.txt // 提交至暂存区</span><br><span class="line">git commit -m <span class="string">"add env"</span> // 提交至分支</span><br><span class="line">git push origin dev // 将本地当前分支推送至dev</span><br><span class="line">    To github.com:michaelliao/learngit.git</span><br><span class="line">     ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class="line">    error: failed to push some refs to <span class="string">'git@github.com:michaelliao/learngit.git'</span></span><br><span class="line">    hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">    hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">    hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">    hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line">//当出现这种情况说明和远程分支有冲突，需要pull</span><br><span class="line">git pull</span><br><span class="line">    There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">    Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">//git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/dev dev</span><br><span class="line">// 之后再次更新，再提交</span><br><span class="line">git pull</span><br><span class="line">git commit -m <span class="string">"fix env conflict"</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p>因此，多人协作的工作模式通常是这样：</p><ul><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li><li>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。<h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6></li><li>查看远程库信息，使用<code>git remote -v</code></li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><ol><li>rebase<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2></li><li>创建标签</li></ol><ul><li><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p></li><li><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p></li><li><p>命令<code>git tag</code>可以查看所有标签。</p></li></ul><ol><li>操作标签 </li></ol><ul><li><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p></li><li><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p></li><li><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p></li><li><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;headerlink&quot; title=&quot;创建版本库&quot;&gt;&lt;/a&gt;创建版本库&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir learngit // 创建文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; learngit // 进入文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init //  初始化仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add readme.txt // 将readme.txt文件放入到暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;wrote a readme file&quot;&lt;/span&gt; //提交暂存区的修改到仓库中&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>初见微信小程序</title>
    <link href="http://yoursite.com/2019/08/29/%E5%88%9D%E8%A7%81%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/08/29/初见微信小程序/</id>
    <published>2019-08-29T05:55:00.000Z</published>
    <updated>2019-08-29T06:20:01.829Z</updated>
    
    <content type="html"><![CDATA[<p>1.当从一个tab跳往另一个tab页面时应使用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html" target="_blank" rel="external">wx.switchTab</a>,此方法不能携带参数。<br>2.当我们想从当前页回到上一页时，我们不能简单的使用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html" target="_blank" rel="external">wx.navigateTo</a>，应该使用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html" target="_blank" rel="external">wx.navigateBack</a>，其原因在于小程序中页面栈最多十层。使用wx.navigateBack时，很不幸我们无法让其携带参数，我们可以通过以下代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let pages = getCurrentPages();  // 当前页的数据，可以输出来看看有什么东西</span><br><span class="line">let prevPage = pages[pages.length - 2];  // 上一页的数据，也可以输出来看看有什么东西</span><br><span class="line">/** 设置数据 这里面的 value 是上一页你想被携带过去的数据，后面是本方法里你得到的数据，我这里是detail.value，根据自己实际情况设置 */</span><br><span class="line">prevPage.setData(&#123;</span><br><span class="line">  hadConfirm: true,</span><br><span class="line">&#125;)</span><br><span class="line">wx.navigateBack(&#123;</span><br><span class="line">  delta: 2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>3.假如你使用过Vue，相信你一定知道<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="external">动态组件</a>，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure></p><p>幸运的小程序中也提供了相似的功能，语法<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html" target="_blank" rel="external">模板</a>，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template name=&quot;odd&quot; data=&quot;&#123;&#123;item1&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;view&gt; &#123;&#123;item1&#125;&#125; &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;block&gt;</span><br><span class="line">  &lt;template is=&quot;odd&quot; data=&#123;&#123;item1&#125;&#125;/&gt;</span><br><span class="line">&lt;/block&gt;</span><br><span class="line">&lt;block&gt;</span><br><span class="line">  &lt;template is=&quot;odd&quot; data=&#123;&#123;item2&#125;&#125;/&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure></p><p>相信你已经看出了这段代码和官方给出的示例有所不同，这里我想说明的一点是，当你想使用同一个模板，却向模板传不同的数据，这种方法是行不通的，你只能获取到<strong>item1</strong>的传递的数据。（这里经过尝试，的确如此，不知道是我没有领悟其精髓还是模板本就如此）</p><p>4.微信小程序中有和Vue中v-if，v-show相似的东西，他们分别是<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html#%E5%85%AC%E5%85%B1%E5%B1%9E%E6%80%A7" target="_blank" rel="external">公共属性hidden</a>和条件渲染<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html" target="_blank" rel="external">wx:if</a>，微信官方对他们两个进行了比较</p><blockquote><p>wx:if vs hidden因为 wx:if 之中的模板也可能包含数据绑定，所以当 wx:if 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。<br>同时 wx:if 也是惰性的，如果在初始渲染条件为 false，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。<br>相比之下，hidden 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。<br>一般来说，wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 wx:if 较好。</p></blockquote><p>相信聪明的你已经看出的了，这四者中的异同。</p><p>5.在微信小程序中当我们想更改数组对象中的值时我们不能直接修改，我们需要像下面一下去操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var sex = &apos;project[&apos; + index + &apos;].sex&apos;;</span><br><span class="line">that.setData(&#123;</span><br><span class="line">    [sex]: &quot;男&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>6.小程序中的button组件会有默认的边框，它不是通过border去实现的，是用::after伪元素实现的，我猜测可能跟1px有关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::after &#123;</span><br><span class="line">    border: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.最近在写弹窗内容时发现一个问题，示例：<br>在图中，左侧是在实现右侧效果的过程中而得到的暂时页面效果，为了实现右侧效果，我可以将其背景色取消掉，这很容易，但是我忽略了一点，原本多出来的白色部分还在那里，只不过它是透明的而已，当用户点击看起来是弹窗遮罩的那部分内容时，原本遮罩上应触发的事件却没触发，会让人很困惑。除了改布局，这里我还想到的就是去给这个白色背景加事件。<strong>但是</strong>这里有个好用的css样式pointer-events，虽然在ie中的兼容性差点，但是我在小程序中就不需要考虑这个问题，我们只需要给白色背景添加pointer-events:none然后再给图片添加pointer-events: auto; 就OK了。 </p><p>8.在uni-app中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">建议使用 uni-app 的 onReady代替 vue 的 mounted。</span><br><span class="line">建议使用 uni-app 的 onLoad 代替 vue 的 created。</span><br></pre></td></tr></table></figure></p><p>9.chooseService(item.Id)的Id要与:key=”item.Id”的Id相同，奇怪的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;serve-item&quot; v-for=&quot;(item, index) in timeAppoint&quot; :key=&quot;item.Id&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;chooseService(item.Id)&quot; class=&quot;serve-item-btn&quot; :class=&quot;&#123; &apos;serve-item-btn-active&apos;: item.IsReserve &#125;&quot; type=&quot;default&quot; &gt;</span><br><span class="line">&lt;view class=&quot;serve-item-order&quot;&gt;</span><br><span class="line">&lt;view class=&quot;serve-item-just-clock&quot;&gt;&#123;&#123; item.ProjectName &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>10.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11.在less中使用calc```calc(~&apos;100% - 110rpx&apos;)```,在less中使用calc```calc(100% - 110rpx)</span><br></pre></td></tr></table></figure></p><p>12.在微信小程序中使用原生的swiper中有display-multiple-items属性，当swiper-item数量小于display-multiple-items属性值，swiper会不显示。<strong>动态class是个很有用的功能。</strong><br>13.uni-app中修改上一页数据：</p><h6 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let pages = getCurrentPages(); // 当前页的数据，可以输出来看看有什么东西</span><br><span class="line">let prevPage = pages[pages.length - 2]; //上一页的数据，也可以输出来看看有什么东西</span><br><span class="line">console.log(&apos;prevPage&apos;, prevPage)</span><br><span class="line">/** 设置数据 这里面的 value 是上一页你想被携带过去的数据，后面是本方法里你得到的数据，我这里是detail.value，根据自己实际情况设置 */</span><br><span class="line">// prevPage.data.chooseImgUrl=avatar</span><br><span class="line">// this.$set(prevPage.data,&apos;chooseImgUrl&apos;,avatar)</span><br><span class="line">// this.$set(prevPage.data,&apos;HeadImgUrl&apos;,avatar)</span><br><span class="line">// prevPage.data.HeadImgUrl=avatar</span><br><span class="line">prevPage.setData(&#123;</span><br><span class="line">    chooseImgUrl: avatar,</span><br><span class="line">    HeadImgUrl: avatar</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="响应数据的修改"><a href="#响应数据的修改" class="headerlink" title="响应数据的修改"></a>响应数据的修改</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let pages = getCurrentPages();</span><br><span class="line">let currPage = pages[pages.length - 1];</span><br><span class="line">if (currPage.data.chooseImgUrl) &#123;</span><br><span class="line">this.chooseImgUrl = currPage.data.chooseImgUrl</span><br><span class="line">this.HeadImgUrl = currPage.data.chooseImgUrl</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line">this.$refs.poster.setData(&#123;</span><br><span class="line">config: this.posterConfig</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>14.微信小程序的页面生命周期</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Object</td><td>页面的初始数据</td></tr><tr><td>onLoad</td><td>function</td><td>生命周期回调—监听页面加载</td></tr><tr><td>onShow</td><td>function</td><td>生命周期回调—监听页面显示</td></tr><tr><td>onReady</td><td>function</td><td>生命周期回调—监听页面初次渲染完成</td></tr><tr><td>onHide</td><td>function</td><td>生命周期回调—监听页面隐藏</td></tr><tr><td>onUnload</td><td>function</td><td>生命周期回调—监听页面卸载</td></tr><tr><td>onPullDownRefresh</td><td>function</td><td>监听用户下拉动作</td></tr><tr><td>onReachBottom</td><td>function</td><td>页面上拉触底事件的处理函数</td></tr><tr><td>onShareAppMessage</td><td>function</td><td>用户点击右上角转发</td></tr><tr><td>onPageScroll</td><td>function</td><td>页面滚动触发事件的处理函数</td></tr><tr><td>onResize</td><td>function</td><td>页面尺寸改变时触发，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html#%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E5%90%AF%E7%94%A8%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E6%94%AF%E6%8C%81" target="_blank" rel="external">响应显示区域变化</a></td></tr><tr><td>onTabItemTap</td><td>function</td><td>当前是 tab 页时，点击 tab 时触发</td></tr><tr><td>其他</td><td>any</td><td>生命周期回调—监听页面加载</td></tr></tbody></table><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html" target="_blank" rel="external">微信小程序的组件生命周期</a></p><p>15.微信小程序fixed定位的input输入框placeholder随屏幕滚动bug，把input输入框改为textarea然后加上属性 fixed=”true”就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea placeholder=&apos;想跟他说点什么&apos; bindinput=&quot;bindContent&quot; value=&apos;&#123;&#123;content&#125;&#125;&apos; fixed=&quot;true&quot; show-confirm-bar=&quot;&#123;&#123;false&#125;&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.当从一个tab跳往另一个tab页面时应使用&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wx.switchTab&lt;/a&gt;,此方法不能携带参数。&lt;br&gt;2.当我们想从当前页回到上一页时，我们不能简单的使用&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wx.navigateTo&lt;/a&gt;，应该使用&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wx.navigateBack&lt;/a&gt;，其原因在于小程序中页面栈最多十层。使用wx.navigateBack时，很不幸我们无法让其携带参数，我们可以通过以下代码实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let pages = getCurrentPages();  // 当前页的数据，可以输出来看看有什么东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let prevPage = pages[pages.length - 2];  // 上一页的数据，也可以输出来看看有什么东西&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/** 设置数据 这里面的 value 是上一页你想被携带过去的数据，后面是本方法里你得到的数据，我这里是detail.value，根据自己实际情况设置 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prevPage.setData(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hadConfirm: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wx.navigateBack(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  delta: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ionic serve刷新无响应</title>
    <link href="http://yoursite.com/2019/08/29/ionic-serve%E5%88%B7%E6%96%B0%E6%97%A0%E5%93%8D%E5%BA%94/"/>
    <id>http://yoursite.com/2019/08/29/ionic-serve刷新无响应/</id>
    <published>2019-08-29T03:37:49.000Z</published>
    <updated>2019-08-29T06:20:11.538Z</updated>
    
    <content type="html"><![CDATA[<p>cli packages: (C:\Users\Coder\AppData\Roaming\npm\node_modules)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ionic/cli-utils  : 1.12.0</span><br><span class="line">ionic (Ionic CLI) : 3.12.0</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>global packages:</p><pre><code>cordova (Cordova CLI) : 6.5.0</code></pre><p>local packages:</p><pre><code>@ionic/app-scripts : 3.2.3Cordova Platforms  : android 6.1.2 browser 4.1.0Ionic Framework    : ionic-angular 3.9.2</code></pre><p>System:</p><pre><code>Android SDK Tools : 25.2.5Node              : v10.15.0npm               : 6.3.0OS                : Windows 10</code></pre><p>Misc:</p><pre><code>backend : pro</code></pre><p>以上为我的ionic环境<br>当使用ionic serve 启动时一刷新就会处于响应中的状态，后来尝试使用npm run ionic:serve时却意外的解决了该问题</p><pre><code>启动过程中也遇到了下面的问题events.js:160  throw er; // Unhandled &apos;error&apos; event  ^Error: read ECONNRESET  at exports._errnoException (util.js:1026:11)  at TCP.onread (net.js:569:26)</code></pre><p>经<a href="https://github.com/ionic-team/ionic-cli/issues/2921" target="_blank" rel="external">查阅</a>可能是ws插件的bug引起<br>将ws升级至3.2.0即可解决，npm install ws@3.3.2   // 3.3.2的版本已经修复该bug<br>也有建议<code>npm install --save-dev @ionic/app-scripts@latest</code><br>在这个过程中发现似乎就算没有ws也能正常启动，很奇怪</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cli packages: (C:\Users\Coder\AppData\Roaming\npm\node_modules)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ionic/cli-utils  : 1.12.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ionic (Ionic CLI) : 3.12.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>vue中select绑定多个值及回显</title>
    <link href="http://yoursite.com/2019/08/29/vue%E4%B8%ADselect%E7%BB%91%E5%AE%9A%E5%A4%9A%E4%B8%AA%E5%80%BC%E5%8F%8A%E5%9B%9E%E6%98%BE/"/>
    <id>http://yoursite.com/2019/08/29/vue中select绑定多个值及回显/</id>
    <published>2019-08-29T03:13:45.000Z</published>
    <updated>2019-08-29T06:20:32.654Z</updated>
    
    <content type="html"><![CDATA[<p>距离上篇文章已经快九个月了，我是不是堕落了。。<br>这篇文章主要是记录我在项目中遇到的一个小问题，其实说小也不小，在去年刚接触vue的时候，对于select如何绑定多个值这个问题一度让我不知所措。刚开始完全没接触过vue和elementUI直接上手，跟着element粘贴复制官网写着还挺顺利，突然某天后台需要在select选中时让我多传个值，我不知道怎么办了，官网上例子是这样的：<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/uz4mko3d/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><p>v-model只能是value的值，我完全被官网的例子限制住了（怪我太蠢）。<br><a id="more"></a></p><h2 id="1-拼接value"><a href="#1-拼接value" class="headerlink" title="1.拼接value"></a>1.拼接value</h2><p>后来在群里问了问，说是可以改成这样的<code>:value=&quot;item.value+item.label&quot;</code>,想来大家应该也懂这个意思，为了在传值的时候更方便，可以把它改成这样<code>:value=&quot;item.value+&#39;/&#39;+item.label&quot;</code>，之后就可以很方便的这样<code>value.split(&#39;/&#39;)[0]</code>取值了。</p><h2 id="2-绑定索引"><a href="#2-绑定索引" class="headerlink" title="2.绑定索引"></a>2.绑定索引</h2><p>还有一种方法就是不绑定具体的值，而是去绑定索引值<code>:value=&quot;index&quot;</code>，在获取值的时候可以这样获取<code>options[index].value</code>.具体例子在这里<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/uz4mko3d/6//embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><h2 id="3-数据回显"><a href="#3-数据回显" class="headerlink" title="3.数据回显"></a>3.数据回显</h2><p>以上两种方法都可以很好的解决select绑定多值的问题，但是我们不妨多想一点，在新增操作的时候可以这样，那么编辑的时候怎么回显呢？select会根据绑定值与某个option的value值是否相同来判断是否选中，在上述两个方法中，我们不可能为了这么一个操作让后台在数据库中多存一个拼接好的value或者一个索引，想必后台同学也不会愿意的。对于第一种方式，回显时只需要将从后台获取的数据拼接在一起就行，对于第二种方式，需要去进行循环对比，找出对应的索引值,然后进行赋值，具体代码在这里:<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/uz4mko3d/13//embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>这虽然是个挺常见的问题，但对于当时的我来说是个不小的问题，现在公司项目不那么急，抽空记录一下。这只是我自己的想法，如果您有更好的方法，不妨分享一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上篇文章已经快九个月了，我是不是堕落了。。&lt;br&gt;这篇文章主要是记录我在项目中遇到的一个小问题，其实说小也不小，在去年刚接触vue的时候，对于select如何绑定多个值这个问题一度让我不知所措。刚开始完全没接触过vue和elementUI直接上手，跟着element粘贴复制官网写着还挺顺利，突然某天后台需要在select选中时让我多传个值，我不知道怎么办了，官网上例子是这样的：&lt;br&gt;&lt;iframe scrolling=&quot;no&quot; width=&quot;600&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net///Denny_code/uz4mko3d/embedded/js,resources,css,html,result/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;v-model只能是value的值，我完全被官网的例子限制住了（怪我太蠢）。&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>类似表格的删除与添加</title>
    <link href="http://yoursite.com/2017/12/20/%E7%B1%BB%E4%BC%BC%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%B7%BB%E5%8A%A0/"/>
    <id>http://yoursite.com/2017/12/20/类似表格的删除与添加/</id>
    <published>2017-12-20T05:57:01.000Z</published>
    <updated>2019-08-29T02:49:44.808Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这是吐槽，可以跳过的</strong>，刚学习vue的时候用的第一个框架是elementUI，真的是爱不释手，公司的业务要求也没那么多，基本都能满足，现在不一样了，啥都得自己写了。怎么说呢，幸与不幸，幸运的是能够自己多动手动脑了，不幸的是貌似脑子不够用的。。。。<br>这个类表格，为什么要类表格呢？他虽然可以做成<strong>table</strong>,但因为很多人感觉<strong>table</strong>太low，所以大家都不怎么用，领导也不让用，于是我就用了这个类表格的称呼。<br>在一些业务场景中我们得让用户能对类表格能增加删除，假如我们用的是jQuery，这就是简单的字符串拼接和事件绑定，中间会有点小波折，比如<strong>事件委托</strong>（刚开始是真的头疼）。但是我们现在用的vue，我们不应该再去拼接一坨字符串，我们只要操作数据就行了，我的思路如下：<br><a id="more"></a></p><ol><li><p>创建一个数组对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">items: [&#123;</span><br><span class="line">       name: &apos;&apos;,   我</span><br><span class="line">       adds: &apos;&apos;,   在</span><br><span class="line">       tel: &apos;&apos;,    这</span><br><span class="line">     &#125;],           里</span><br></pre></td></tr></table></figure></li><li><p>v-for进行循环，这一步对我来说比较难得就是v-model了，但现在看来就是一种顺其自然的舒心。(希望你也能体会到这种感觉)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;main&quot; v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main-name&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;item.name&quot; :value=&quot;item.name&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-adds&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;item.adds&quot; :value=&quot;item.adds&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-tel&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;item.tel&quot; :value=&quot;item.tel&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-btn&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;add(index)&quot; v-if=&quot;index===len&quot;&gt;O&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;del(index)&quot; v-else&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li><li><p>把增加删除方法写上。在这里我们还需要写上获取数组长度的方法以便调用，因为我们要判断在最后一个的时候显示添加按钮，另一个原因是v-for时<strong>貌似</strong>获取不了这个长度。  </p></li></ol><pre><code>methods: {  del: function(index) {    this.items.splice(index, 1);    this.geLength();  },  add: function(index) {    this.items.splice(index, 0, {      name: &apos;&apos;,      adds: &apos;&apos;,      tel: &apos;&apos;,    });    this.geLength();  },  geLength: function() {    this.len = this.items.length - 1;  }},created: function() {  this.geLength();}</code></pre><p>大概就是这些了，想自己动手尝试的同学可以看这里<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/syr81cw0/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><p>如果大家还有更好的方式，还请赐教，</p><p>代码拙劣，如有错误，望指出。  </p><blockquote><p>本人原创 如需转载请注明出处 <a href="http://bestzhengke.com/2017/12/20/%E7%B1%BB%E4%BC%BC%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%B7%BB%E5%8A%A0/#more" target="_blank" rel="external">http://bestzhengke.com/2017/12/20/%E7%B1%BB%E4%BC%BC%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%B7%BB%E5%8A%A0/#more</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这是吐槽，可以跳过的&lt;/strong&gt;，刚学习vue的时候用的第一个框架是elementUI，真的是爱不释手，公司的业务要求也没那么多，基本都能满足，现在不一样了，啥都得自己写了。怎么说呢，幸与不幸，幸运的是能够自己多动手动脑了，不幸的是貌似脑子不够用的。。。。&lt;br&gt;这个类表格，为什么要类表格呢？他虽然可以做成&lt;strong&gt;table&lt;/strong&gt;,但因为很多人感觉&lt;strong&gt;table&lt;/strong&gt;太low，所以大家都不怎么用，领导也不让用，于是我就用了这个类表格的称呼。&lt;br&gt;在一些业务场景中我们得让用户能对类表格能增加删除，假如我们用的是jQuery，这就是简单的字符串拼接和事件绑定，中间会有点小波折，比如&lt;strong&gt;事件委托&lt;/strong&gt;（刚开始是真的头疼）。但是我们现在用的vue，我们不应该再去拼接一坨字符串，我们只要操作数据就行了，我的思路如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue简易表格全选</title>
    <link href="http://yoursite.com/2017/12/14/vue%E7%AE%80%E6%98%93%E8%A1%A8%E6%A0%BC%E5%85%A8%E9%80%89/"/>
    <id>http://yoursite.com/2017/12/14/vue简易表格全选/</id>
    <published>2017-12-14T08:50:37.000Z</published>
    <updated>2019-08-29T03:20:36.895Z</updated>
    
    <content type="html"><![CDATA[<p>最近以为公司业务需要不让用我最爱的<strong>elementUI</strong>了，刚开始感觉没啥，后来真到开始写了，真的就懵逼，组件不让用啥都得自己写了。。</p><p>最常用表格全选都都变成了一个坎。</p><p>对于表格全选，我们一定能想到就是判断表格的个数和表格选中的个数相比较，相等全选按钮就处于选中状态，不等就不选中，可是这又不是<strong>jQuery</strong>，选择器又不能用。对于刚接触vue半年而且大部分时间都在用饿了么组件的我真的是不知所措。</p><p>搜了很多资料，看到很多解决方案都是要在数据中加入<strong>checked</strong>状态，我是拒绝的，就算我愿意后台哥哥也不愿意啊，这不是脏数据嘛！</p><p>而且还不是组件式的，谁想用都得copy一大坨代码，我相信我们组长是拒绝的。感觉好难哦。。。</p><p>但是问题还是要解决，饭还是要吃的。</p><p>回家的想了想，看了看vue的官网，灵感就来了，很快就把解决了。</p><p>你以为就这就完了？？</p><p><img src="/assets/get-post/get-post-6" alt="image"><br><a id="more"></a></p><p>全选反选只是checkbox选中，我们的选中是为了获取数据啊，不然选它干啥！</p><p>刚开始想为每行的checkbox的click事件传值，后来具体操作发现这是有bug的。然后又各种尝试最后解决了问题。</p><p>下面上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;check-all&apos;, &#123;</span><br><span class="line">template: &apos;&lt;input type=&quot;checkbox&quot; @click=&quot;checkall()&quot; /&gt;&apos;,</span><br><span class="line">props: &#123;</span><br><span class="line">  // 必须为string类型</span><br><span class="line">  data: &#123;</span><br><span class="line">type: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  checkall: function() &#123;</span><br><span class="line">var data = this.data?this.data:&quot;list&quot;;</span><br><span class="line">var row = this.$root.$refs[data].rows;</span><br><span class="line">var arr = [];</span><br><span class="line">var sels = [];</span><br><span class="line">for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">  if (row[i].children[0].children[0].checked) &#123;</span><br><span class="line">arr.push(row[i].children[0].children[0].checked);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">if (arr.length === row.length - 1) &#123;</span><br><span class="line">  for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">  </span><br><span class="line">row[i].children[0].children[0].checked = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">row[i].children[0].children[0].checked = true;</span><br><span class="line">sels.push(this.$root[data][row[i - 1].rowIndex]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">this.$emit(&apos;ymhy-select-all&apos;, sels)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;check-item&apos;, &#123;</span><br><span class="line">template: &apos;&lt;input type=&quot;checkbox&quot; @click=&quot;checkitem()&quot; /&gt;&apos;,</span><br><span class="line">// 技术上 data 的确是一个函数了，因此 Vue 不会警告，</span><br><span class="line">// 但是我们却给每个组件实例返回了同一个对象的引用</span><br><span class="line">props: &#123;</span><br><span class="line">  // 数组/对象的默认值应当由一个工厂函数返回</span><br><span class="line">  data: &#123;</span><br><span class="line">type: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">data: function() &#123;</span><br><span class="line">  return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  checkitem: function() &#123;</span><br><span class="line">var data = this.data ? this.data : &quot;list&quot;;</span><br><span class="line">var row = this.$root.$refs[data].rows;</span><br><span class="line">var arr = [];</span><br><span class="line">var sels = [];</span><br><span class="line">for (var i = 1; i &lt; row.length; i++) &#123;</span><br><span class="line">  if (row[i].children[0].children[0].checked) &#123;</span><br><span class="line">arr.push(row[i].children[0].children[0].checked);</span><br><span class="line">sels.push(this.$root[data][row[i - 1].rowIndex]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">if (arr.length === row.length - 1) &#123;</span><br><span class="line">  row[0].children[0].children[0].checked = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  row[0].children[0].children[0].checked = false;</span><br><span class="line">&#125;</span><br><span class="line">this.$emit(&apos;ymhy-select-item&apos;, sels)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>想自己动手尝试的同学可以点击这里<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/84d7224x/2//embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><p>这是的实现方法，如果大家还有更好的方式，还请赐教，</p><p>代码拙劣，如有错误，望指出。</p><blockquote><p>本人原创 如需转载请注明出处 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近以为公司业务需要不让用我最爱的&lt;strong&gt;elementUI&lt;/strong&gt;了，刚开始感觉没啥，后来真到开始写了，真的就懵逼，组件不让用啥都得自己写了。。&lt;/p&gt;
&lt;p&gt;最常用表格全选都都变成了一个坎。&lt;/p&gt;
&lt;p&gt;对于表格全选，我们一定能想到就是判断表格的个数和表格选中的个数相比较，相等全选按钮就处于选中状态，不等就不选中，可是这又不是&lt;strong&gt;jQuery&lt;/strong&gt;，选择器又不能用。对于刚接触vue半年而且大部分时间都在用饿了么组件的我真的是不知所措。&lt;/p&gt;
&lt;p&gt;搜了很多资料，看到很多解决方案都是要在数据中加入&lt;strong&gt;checked&lt;/strong&gt;状态，我是拒绝的，就算我愿意后台哥哥也不愿意啊，这不是脏数据嘛！&lt;/p&gt;
&lt;p&gt;而且还不是组件式的，谁想用都得copy一大坨代码，我相信我们组长是拒绝的。感觉好难哦。。。&lt;/p&gt;
&lt;p&gt;但是问题还是要解决，饭还是要吃的。&lt;/p&gt;
&lt;p&gt;回家的想了想，看了看vue的官网，灵感就来了，很快就把解决了。&lt;/p&gt;
&lt;p&gt;你以为就这就完了？？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/get-post/get-post-6&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中的下载</title>
    <link href="http://yoursite.com/2017/11/23/jQuery%E4%B8%AD%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/11/23/jQuery中的下载/</id>
    <published>2017-11-23T06:30:37.000Z</published>
    <updated>2018-06-05T14:10:02.402Z</updated>
    
    <content type="html"><![CDATA[<p>在公司项目开发过程中遇到的小点，记录一下<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/ybd7mcke//embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在公司项目开发过程中遇到的小点，记录一下&lt;br&gt;&lt;iframe scrolling=&quot;no&quot; width=&quot;600&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net///Denny_code/ybd7mcke//embedded/js,resources,
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的父子组件通信</title>
    <link href="http://yoursite.com/2017/11/23/Vue%E4%B8%AD%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/11/23/Vue中的父子组件通信/</id>
    <published>2017-11-23T06:30:37.000Z</published>
    <updated>2019-08-29T01:01:20.417Z</updated>
    
    <content type="html"><![CDATA[<p>Vue中父组件向子组件传值，主要依靠组件中的<strong><em>props</em></strong>属性，下面是一个局部注册组件栗子<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/m7aux16y/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe><br><a id="more"></a><br>这里是一个全局注册组件的栗子<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/4zaapsda/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><p>那么子组件又如何向父组件传值呢？类比官网我们来看看下面的栗子：<br><iframe scrolling="no" width="600" height="300" src="//jsfiddle.net///Denny_code/bh33rkc4/embedded/js,resources,css,html,result/light" frameborder="0" allowfullscreen></iframe></p><ul><li>使用 <strong><em>$on(eventName)</em></strong> 监听事件</li><li>使用 <strong><em>$emit(eventName)</em></strong> 触发事件性  </li></ul><p>切记<strong>==不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子==。</strong><br>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，因为父组件可能会关心这些事件。请注意这一点很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue中父组件向子组件传值，主要依靠组件中的&lt;strong&gt;&lt;em&gt;props&lt;/em&gt;&lt;/strong&gt;属性，下面是一个局部注册组件栗子&lt;br&gt;&lt;iframe scrolling=&quot;no&quot; width=&quot;600&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net///Denny_code/m7aux16y/embedded/js,resources,css,html,result/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>get与post请求你知道多少？</title>
    <link href="http://yoursite.com/2017/11/21/get%E4%B8%8Epost%E8%AF%B7%E6%B1%82%E4%BD%A0%E7%9F%A5%E9%81%93%E5%A4%9A%E5%B0%91%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/11/21/get与post请求你知道多少？/</id>
    <published>2017-11-21T02:48:47.000Z</published>
    <updated>2017-11-21T03:31:56.423Z</updated>
    
    <content type="html"><![CDATA[<hr><p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。</p><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</p><p>你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。</p><p>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p><p><img src="/assets/get-post/get-post-1" alt="image"></p><a id="more"></a><p>你轻轻松松的给出了一个“标准答案”：</p><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>GET请求只能进行url编码，而POST支持多种编码方式。</p><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p><p>GET参数通过URL传递，POST放在Request body中。<br>（本标准答案参考自w3schools）</p><p>“很遗憾，这不是我们要的回答！”</p><p><img src="/assets/get-post/get-post-2" alt="image"></p><p>请告诉我真相。。。</p><p>如果我告诉你GET和POST本质上没有区别你信吗？ </p><p>让我们扒下GET和POST的外衣，坦诚相见吧！</p><p><img src="/assets/get-post/get-post-3" alt="image"></p><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>那么，“标准答案”里的那些区别是怎么回事？</p><p><img src="/assets/get-post/get-post-4" alt="image"></p><p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？</p><p><img src="/assets/get-post/get-post-5" alt="image"></p><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 </p><p>你以为本文就这么结束了？</p><p><img src="/assets/get-post/get-post-6" alt="image"></p><p>我们的大BOSS还等着出场呢。。。</p><p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET和POST还有一个重大区别，简单的说：<br>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：<br>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li>GET与POST都有自己的语义，不能随便混用。</li><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li></ol><p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p><p><img src="/assets/get-post/get-post-7" alt="image"></p><blockquote><p>转自微信公众号WebTechGarden</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。&lt;/p&gt;
&lt;p&gt;最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。&lt;/p&gt;
&lt;p&gt;你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。&lt;/p&gt;
&lt;p&gt;当你在面试中被问到这个问题，你的内心充满了自信和喜悦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/get-post/get-post-1&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>博客初建成，谈一下感想吧！</title>
    <link href="http://yoursite.com/2017/11/17/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%BB%BA%E6%88%90%EF%BC%8C%E8%B0%88%E4%B8%80%E4%B8%8B%E6%84%9F%E6%83%B3%E5%90%A7%EF%BC%81/"/>
    <id>http://yoursite.com/2017/11/17/博客初建成，谈一下感想吧！/</id>
    <published>2017-11-17T03:00:19.000Z</published>
    <updated>2017-11-18T02:25:26.976Z</updated>
    
    <content type="html"><![CDATA[<img src="/assets/2017-11-17/me.jpg" class="itsme" width="170" title="这只就是我本人啦！！！"><h2 id="一，"><a href="#一，" class="headerlink" title="一，"></a>一，</h2><p>搭建个人博客这个想法从我刚刚开始接触前端就有了，感觉那是一件很cool的事，现在我就正在做这件很cool的事。  </p><h2 id="二，"><a href="#二，" class="headerlink" title="二，"></a>二，</h2><p>我是一名90后，我们这代人跟随着腾讯的小企鹅一起成长，从1999年的OICQ生到今天腾讯QQ，从飞车到英雄联盟（怪我生的晚之前的没玩过 罒ω罒），从天天酷跑到王者农药。<br>当然腾讯对我们影响最大的还是社交，我们喜欢用QQ，也习惯了QQ，多少年不见得老友都能通过QQ找回来。还有QQ空间，这可能是那个时候我们唯一能够发泄心情的地方了，随时随地的发个说说，A（某位朋友的口中@）一下某人，分享一下自己的苦与乐。然而在不知不觉中<a id="more"></a> 我们都更多的去使用<strong>微信</strong>，甚至认为用QQ是一件很low的事，添加朋友我们的首选变成了微信，求职发邮件也不敢再用QQ邮箱，一切都变了，变的那么快。<br>QQ变成了90后的情怀，QQ空间也是，微信变成了主流。<br>慢慢的我来到了大学，大家都一样，但我想不一样，我想有个自己的空间，安逸。<br>建立博客的想法逐渐产生。</p><h2 id="三，"><a href="#三，" class="headerlink" title="三，  "></a>三，  </h2><p>在我接触前端之前，建立个人博客只是一个想法，接触前端之后编程的实际行动。动手建站是在我第一份工作的时候，找到工作后就不需要话大量的时间去应对面试，工作之余也有了空闲，并且恰逢国庆，我可以安心的去做它。<br>原本以为这会花费好久的时间，没想到一天的功夫就搭起来了，这里要感谢<a href="http://www.cnfeat.com" target="_blank" rel="external">陈素封</a>的教程，从node到git,从申请域名到域名解析，基本都有详细的教程，推荐有建站想法的同学看看，迅速建立自己博客。  </p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>第一次用<strong>markdown</strong>语法，页面排版慢慢来，各位见谅，最后推荐一下有道云笔记的<strong>markdown</strong>编辑器，实时同步预览真心不错，还内置了各种语法，省时省力，懒人的福音！</p><iframe src="//music.163.com/outchain/player?type=2&id=167882&auto=0&height=66" width="330" height="86" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/assets/2017-11-17/me.jpg&quot; class=&quot;itsme&quot; width=&quot;170&quot; title=&quot;这只就是我本人啦！！！&quot;&gt;
&lt;h2 id=&quot;一，&quot;&gt;&lt;a href=&quot;#一，&quot; class=&quot;headerlink&quot; title=&quot;一，&quot;&gt;&lt;/a&gt;一，&lt;/h2&gt;&lt;p&gt;搭建个人博客这个想法从我刚刚开始接触前端就有了，感觉那是一件很cool的事，现在我就正在做这件很cool的事。  &lt;/p&gt;
&lt;h2 id=&quot;二，&quot;&gt;&lt;a href=&quot;#二，&quot; class=&quot;headerlink&quot; title=&quot;二，&quot;&gt;&lt;/a&gt;二，&lt;/h2&gt;&lt;p&gt;我是一名90后，我们这代人跟随着腾讯的小企鹅一起成长，从1999年的OICQ生到今天腾讯QQ，从飞车到英雄联盟（怪我生的晚之前的没玩过 罒ω罒），从天天酷跑到王者农药。&lt;br&gt;当然腾讯对我们影响最大的还是社交，我们喜欢用QQ，也习惯了QQ，多少年不见得老友都能通过QQ找回来。还有QQ空间，这可能是那个时候我们唯一能够发泄心情的地方了，随时随地的发个说说，A（某位朋友的口中@）一下某人，分享一下自己的苦与乐。然而在不知不觉中
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
